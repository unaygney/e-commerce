datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

model Product {
  product_id  String     @id @default(cuid())
  name        String
  description String
  items       CartItem[]
}

model Unit {
  sku        String     @id @default(cuid())
  list_price Float
  sale_price Float
  size       String
  color      String
  stock      Int
  image_url  String
  cartItems  CartItem[]
}

model CartItem {
  id               Int      @id @default(autoincrement())
  product          Product  @relation(fields: [productId], references: [product_id])
  unit             Unit     @relation(fields: [unitId], references: [sku])
  total_list_price Float
  total_sale_price Float
  quantity         Int
  created_at       DateTime @default(now())
  productId        String
  unitId           String
  cart             Cart     @relation(fields: [cartId], references: [cart_id])
  cartId           String
}

model Cart {
  cart_id   String     @id @default(cuid())
  items     CartItem[]
  summary   Summary    @relation(fields: [summaryId], references: [id])
  summaryId Int        @unique
  orders    Order[]
}

model Summary {
  id            Int     @id @default(autoincrement())
  subtotal      Float
  discount      Float
  discount_code String?
  shipping      Float
  total         Float
  cart          Cart?
}

model subscription {
  id         String   @id @default(uuid())
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  is_active  Boolean  @default(true)
}

model Order {
  id     String      @id @default(cuid())
  amount Float
  isPaid Boolean     @default(false)
  status OrderStatus @default(awaiting_shipment)

  cart   Cart   @relation(fields: [cartId], references: [cart_id])
  cartId String

  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?
  paymentMethod     CardInfo?        @relation
  paymentMethodId   String?          @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CardInfo {
  id        String  @id @default(cuid())
  type      String
  last_4    String
  exp_month Int
  exp_year  Int
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @unique
}

model ShippingAddress {
  id      String  @id @default(cuid())
  line1   String
  line2   String?
  city    String
  state   String
  zip     String
  country String
  orders  Order[]
}

model BillingAddress {
  id      String  @id @default(cuid())
  line1   String
  line2   String?
  city    String
  state   String
  zip     String
  country String
  orders  Order[]
}
